name: ApiLogix - AWS - Build and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      checks: write # Add this line to grant write permission for checks
      contents: read
      actions: read

    steps:
      - name: Checkout code from develop branch
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x" # Specify the Node.js version you need

      - name: Install dependencies
        run: |
          cd apilogix-react-app
          npm install

      - name: Run tests
        run: |
          cd apilogix-react-app
          npm run testJunit

      - name: Test Jest Junit Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests # Name of the check run which will be created
          path: "apilogix-react-app/reports/jest/junit.xml" # Path to test results
          reporter: jest-junit # Format of test results
          fail-on-error: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update badge status
        run: |
          if grep -q '<failure>' apilogix-react-app/reports/jest/junit.xml; then
            echo "Tests failed" > badge.txt
          else
            echo "Tests passed" > badge.txt
          fi
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"state\": \"$(cat badge.txt)\", \"context\": \"Jest Tests\"}" \
          "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"

      - name: Run Nextjs Build script
        run: |
          cd apilogix-react-app
          npm run buildlinux

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.x"
          include-prerelease: true

      - name: Build with dotnet
        run: |
          cd ApiLogix.Server.WebApp/
          dotnet build --configuration Release

      - name: Publish with dotnet
        run: |
          cd ApiLogix.Server.WebApp/
          dotnet publish -c Release -o ${{ github.workspace }}/publish

      # Upload the .NET app artifact for the deployment job
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: net-app
          path: ${{ github.workspace }}/publish
          retention-days: 1 # Retain for 1 day

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build # This ensures that the deploy job waits for the build job to complete
    if: ${{ success() }} # Only run if the build job was successful
    environment:
      name: "Production"

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: net-app
          path: net-app

      - name: List contents of downloaded artifact
        run: ls -al net-app/

      # Deploy the files to EC2 using SCP (secure copy)
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: net-app/
          target: /home/ubuntu/apilogix-api/

      - name: Trying Manually SSH and run script
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOSTNAME: ${{secrets.EC2_HOST}}
          USER_NAME: ubuntu
    
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} <<EOF
            sudo systemctl restart apilogix-api.service
            sudo systemctl reload nginx
          EOF
